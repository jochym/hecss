# AUTOGENERATED! DO NOT EDIT! File to edit: ../17_xscale.ipynb.

# %% auto 0
__all__ = ['plot_virial_stat']

# %% ../17_xscale.ipynb 2
import numpy as np
from scipy.special import expit
from scipy.stats import chi2, chi, norm

import ase
import ase.units as un
from ase.calculators.vasp import Vasp
import spglib
from spglib import find_primitive, get_symmetry_dataset
from glob import glob
from matplotlib import pyplot as plt
from hecss.util import normalize_conf
from hecss import *

# %% ../17_xscale.ipynb 9
def plot_virial_stat(cryst, smpl, normal=True):
    elems = cryst.get_chemical_symbols()
    elmap = cryst.get_atomic_numbers()
    vir = np.array([abs(s[2]*s[3]) for s in smpl])
    vir /= vir.mean(axis=(-1,-2))[:,None,None]
    nat = len(elems)
    xscale = np.ones(cryst.get_positions().shape)
    # m, s = plot_hist(vir.mean(axis=(-1,-2)), 'Total', 0, normal=True)
    mi = 1
    ma = 1
    for n, el in enumerate(set(elems)):
        elmask = np.array(elems)==el
        m, s = plot_hist(1/np.sqrt(vir[:, elmask, :].mean(axis=(-1,-2))), 
                         el, n+1, normal=normal, df=3*sum(elmask))
        if mi > m-3*s:
            mi = m-3*s
        if ma < m+3*s:
            ma = m+3*s
        xscale[elmask] = m
    plt.axvline(1, ls=':', color='C5', label='Equilibrium')
    plt.xlim(mi, ma)
    plt.legend()
    plt.title('Virial distribution in the sample')
    plt.ylabel('Probability density')
    plt.xlabel('Virial/Temperature');
    return xscale
